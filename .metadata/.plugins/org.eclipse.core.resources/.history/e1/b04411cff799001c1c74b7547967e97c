package ro.ase.cts.g1099.recap.models;

import ro.ase.cts.g1099.recap.exceptions.IllegalTransferException;
import ro.ase.cts.g1099.recap.exceptions.InsufficientFundsException;

public abstract class BankAccount extends Account{
	
	protected String iban;
	protected double balance = 0;
	
	public BankAccount(String iban) {
		this.iban=iban;
	}
	
	//annotations useful for the compiler to know what we want to do
	//using "this" makes clear what balance is and another reason is shadowing
	@Override
	public double getBalance() {
		return this.balance;
	}

	//always validate your input values
	//it is not a good practice to always add throws exception and let it add where you declare everything because you are changing the initial
	@Override
	public void deposit(double amount) throws IllegalTransferException{
		if(amount < 0) {
			throw new IllegalTransferException();
		}
		this.balance+=amount;
		this.balance-=amount;
		
	}

	@Override
	public void withdraw(double amount) throws IllegalTransferException, InsufficientFundsException{
		if(amount < 0) {
			throw new IllegalTransferException();
		}
		if(amount > this.balance) {
			throw new InsufficientFundsException();
		}
		
		
	}

	//do NOT copy-paste
	@Override
	public void transfer(Account destination, double amount) throws IllegalTransferException, InsufficientFundsException {
		this.withdraw(amount);
		destination.deposit(amount);	
				
	}
	
	

}
